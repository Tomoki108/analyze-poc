services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      # 内部コンテナ間通信ではホスト名 "kafka" を使う
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    # 自動トピック作成用の補助サービス
  create_topics:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - kafka
    entrypoint: >
      bash -c "cub kafka-ready -b kafka:9092 1 20 && \
               kafka-topics --create --topic visit-logs --bootstrap-server kafka:9092 \
                 --replication-factor 1 --partitions 1 || echo 'topic exists'"
    restart: "no"

  cassandra:
    image: cassandra:4.0
    ports:
      - "9042:9042"
    volumes:
      - ./cassandra/init:/docker-entrypoint-initdb.d

  log-ingest:
    build:
      context: ./services/log-ingest
    depends_on:
      - kafka
    environment:
      # Docker ネットワーク内で kafka サービスに接続
      KAFKA_BROKERS: kafka:9092
    ports:
      - "8080:8080"

  log-consumer:
    build:
      context: ./services/log-consumer
    depends_on:
      - kafka
      - cassandra
    environment:
      KAFKA_BROKERS: kafka:9092
      CASSANDRA_HOSTS: cassandra

  aggregator:
    build:
      context: ./services/aggregator
    depends_on:
      - cassandra
    environment:
      CASSANDRA_HOSTS: cassandra
    # 自動起動しないようにする
    restart: "no"
    entrypoint: ["sleep", "infinity"]
